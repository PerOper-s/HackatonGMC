package gui;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class Home {
    private JPanel panel1;
    private JLabel iconaUtente;
    private JTextField emailTextField;
    private JButton loginBtn;
    private JLabel stringaHktn;
    private JRadioButton utenteRadioButton;
    private JRadioButton organizzatoreRadioButton;
    private JRadioButton giudiceRadioButton;
    private JLabel messaggioErrore;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(6, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-15918294));
        panel1.setMinimumSize(new Dimension(450, 300));
        panel1.setPreferredSize(new Dimension(450, 350));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30), "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        stringaHktn = new JLabel();
        stringaHktn.setEnabled(true);
        Font stringaHktnFont = this.$$$getFont$$$("Inter", Font.BOLD, 36, stringaHktn.getFont());
        if (stringaHktnFont != null) stringaHktn.setFont(stringaHktnFont);
        stringaHktn.setForeground(new Color(-1));
        stringaHktn.setText("Hackaton");
        panel1.add(stringaHktn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iconaUtente = new JLabel();
        iconaUtente.setIcon(new ImageIcon(getClass().getResource("/icone/icone bianche/icons8-user-56.png")));
        iconaUtente.setText("");
        panel1.add(iconaUtente, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 32), null, 0, false));
        emailTextField = new JTextField();
        emailTextField.setBackground(new Color(-13877680));
        emailTextField.setCaretColor(new Color(-13877680));
        emailTextField.setDisabledTextColor(new Color(-1));
        emailTextField.setEnabled(true);
        Font emailTextFieldFont = this.$$$getFont$$$("Inter", -1, -1, emailTextField.getFont());
        if (emailTextFieldFont != null) emailTextField.setFont(emailTextFieldFont);
        emailTextField.setForeground(new Color(-1));
        emailTextField.setRequestFocusEnabled(true);
        emailTextField.setSelectionColor(new Color(-1));
        emailTextField.setText("Email");
        panel1.add(emailTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 35), null, 0, false));
        utenteRadioButton = new JRadioButton();
        utenteRadioButton.setBackground(new Color(-13285286));
        utenteRadioButton.setFocusPainted(false);
        Font utenteRadioButtonFont = this.$$$getFont$$$("Inter", -1, -1, utenteRadioButton.getFont());
        if (utenteRadioButtonFont != null) utenteRadioButton.setFont(utenteRadioButtonFont);
        utenteRadioButton.setForeground(new Color(-3418666));
        utenteRadioButton.setOpaque(false);
        utenteRadioButton.setSelected(false);
        utenteRadioButton.setText("Utente");
        utenteRadioButton.setVisible(true);
        panel1.add(utenteRadioButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        organizzatoreRadioButton = new JRadioButton();
        organizzatoreRadioButton.setBackground(new Color(-13285286));
        organizzatoreRadioButton.setEnabled(true);
        organizzatoreRadioButton.setFocusPainted(false);
        Font organizzatoreRadioButtonFont = this.$$$getFont$$$("Inter", -1, -1, organizzatoreRadioButton.getFont());
        if (organizzatoreRadioButtonFont != null) organizzatoreRadioButton.setFont(organizzatoreRadioButtonFont);
        organizzatoreRadioButton.setForeground(new Color(-3418666));
        organizzatoreRadioButton.setOpaque(false);
        organizzatoreRadioButton.setText("Organizzatore");
        panel1.add(organizzatoreRadioButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        giudiceRadioButton = new JRadioButton();
        giudiceRadioButton.setBackground(new Color(-13285286));
        giudiceRadioButton.setFocusPainted(false);
        Font giudiceRadioButtonFont = this.$$$getFont$$$("Inter", -1, -1, giudiceRadioButton.getFont());
        if (giudiceRadioButtonFont != null) giudiceRadioButton.setFont(giudiceRadioButtonFont);
        giudiceRadioButton.setForeground(new Color(-3418666));
        giudiceRadioButton.setOpaque(false);
        giudiceRadioButton.setText("Giudice");
        giudiceRadioButton.setVisible(true);
        panel1.add(giudiceRadioButton, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginBtn = new JButton();
        loginBtn.setActionCommand("Button");
        loginBtn.setAutoscrolls(false);
        loginBtn.setBackground(new Color(-13285286));
        loginBtn.setEnabled(true);
        loginBtn.setFocusPainted(true);
        loginBtn.setFocusable(true);
        Font loginBtnFont = this.$$$getFont$$$("Inter", -1, -1, loginBtn.getFont());
        if (loginBtnFont != null) loginBtn.setFont(loginBtnFont);
        loginBtn.setForeground(new Color(-1));
        loginBtn.setHideActionText(false);
        loginBtn.setLabel("Login");
        loginBtn.setOpaque(true);
        loginBtn.setSelected(false);
        loginBtn.setText("Login");
        panel1.add(loginBtn, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messaggioErrore = new JLabel();
        messaggioErrore.setAutoscrolls(false);
        messaggioErrore.setBackground(new Color(-16708570));
        messaggioErrore.setForeground(new Color(-4974080));
        messaggioErrore.setText("");
        panel1.add(messaggioErrore, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    public JButton getLoginBtn() {
        return loginBtn;
    }

    public JTextField getEmailTextField() {
        return emailTextField;
    }

    public JPanel getPanel1() {
        return panel1;
    }

    public JRadioButton getUtenteRadioButton() {
        return utenteRadioButton;
    }

    public JRadioButton getGiudiceRadioButton() {
        return giudiceRadioButton;
    }

    public JRadioButton getOrganizzatoreRadioButton() {
        return organizzatoreRadioButton;
    }

    public JLabel getMessaggioErrore() {
        return messaggioErrore;
    }

    private void createUIComponents() {
        Color coloreSfondoPannello = this.panel1.getBackground();
        this.emailTextField.setBorder(BorderFactory.createLineBorder(coloreSfondoPannello, 2));
    }
}
